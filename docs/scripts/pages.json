[{"name":"abstract class BaseGraph<T : Any>(size: Int, isWeighted: Boolean = true)","description":"graphMateKT.graphClasses.BaseGraph","location":"graphmatekt/graphMateKT.graphClasses/-base-graph/index.html","searchKeys":["BaseGraph","abstract class BaseGraph<T : Any>(size: Int, isWeighted: Boolean = true)","graphMateKT.graphClasses.BaseGraph"]},{"name":"abstract fun addNode(node: T)","description":"graphMateKT.graphClasses.BaseGraph.addNode","location":"graphmatekt/graphMateKT.graphClasses/-base-graph/add-node.html","searchKeys":["addNode","abstract fun addNode(node: T)","graphMateKT.graphClasses.BaseGraph.addNode"]},{"name":"abstract fun nodes(): List<T>","description":"graphMateKT.graphClasses.BaseGraph.nodes","location":"graphmatekt/graphMateKT.graphClasses/-base-graph/nodes.html","searchKeys":["nodes","abstract fun nodes(): List<T>","graphMateKT.graphClasses.BaseGraph.nodes"]},{"name":"class Graph(isWeighted: Boolean = true) : BaseGraph<Any> ","description":"graphMateKT.graphClasses.Graph","location":"graphmatekt/graphMateKT.graphClasses/-graph/index.html","searchKeys":["Graph","class Graph(isWeighted: Boolean = true) : BaseGraph<Any> ","graphMateKT.graphClasses.Graph"]},{"name":"class Grid(val width: Int, val height: Int, initWithDatalessTiles: Boolean = false, isWeighted: Boolean = false) : BaseGraph<Tile> ","description":"graphMateKT.graphClasses.Grid","location":"graphmatekt/graphMateKT.graphClasses/-grid/index.html","searchKeys":["Grid","class Grid(val width: Int, val height: Int, initWithDatalessTiles: Boolean = false, isWeighted: Boolean = false) : BaseGraph<Tile> ","graphMateKT.graphClasses.Grid"]},{"name":"class IntGraph(size: Int, isWeighted: Boolean = true) : BaseGraph<Int> ","description":"graphMateKT.graphClasses.IntGraph","location":"graphmatekt/graphMateKT.graphClasses/-int-graph/index.html","searchKeys":["IntGraph","class IntGraph(size: Int, isWeighted: Boolean = true) : BaseGraph<Int> ","graphMateKT.graphClasses.IntGraph"]},{"name":"constructor(isWeighted: Boolean = true)","description":"graphMateKT.graphClasses.Graph.Graph","location":"graphmatekt/graphMateKT.graphClasses/-graph/-graph.html","searchKeys":["Graph","constructor(isWeighted: Boolean = true)","graphMateKT.graphClasses.Graph.Graph"]},{"name":"constructor(size: Int, isWeighted: Boolean = true)","description":"graphMateKT.graphClasses.BaseGraph.BaseGraph","location":"graphmatekt/graphMateKT.graphClasses/-base-graph/-base-graph.html","searchKeys":["BaseGraph","constructor(size: Int, isWeighted: Boolean = true)","graphMateKT.graphClasses.BaseGraph.BaseGraph"]},{"name":"constructor(size: Int, isWeighted: Boolean = true)","description":"graphMateKT.graphClasses.IntGraph.IntGraph","location":"graphmatekt/graphMateKT.graphClasses/-int-graph/-int-graph.html","searchKeys":["IntGraph","constructor(size: Int, isWeighted: Boolean = true)","graphMateKT.graphClasses.IntGraph.IntGraph"]},{"name":"constructor(stringGrid: List<String>)","description":"graphMateKT.graphClasses.Grid.Grid","location":"graphmatekt/graphMateKT.graphClasses/-grid/-grid.html","searchKeys":["Grid","constructor(stringGrid: List<String>)","graphMateKT.graphClasses.Grid.Grid"]},{"name":"constructor(width: Int, height: Int, initWithDatalessTiles: Boolean = false, isWeighted: Boolean = false)","description":"graphMateKT.graphClasses.Grid.Grid","location":"graphmatekt/graphMateKT.graphClasses/-grid/-grid.html","searchKeys":["Grid","constructor(width: Int, height: Int, initWithDatalessTiles: Boolean = false, isWeighted: Boolean = false)","graphMateKT.graphClasses.Grid.Grid"]},{"name":"constructor(x: Int, y: Int, data: Any? = null)","description":"graphMateKT.Tile.Tile","location":"graphmatekt/graphMateKT/-tile/-tile.html","searchKeys":["Tile","constructor(x: Int, y: Int, data: Any? = null)","graphMateKT.Tile.Tile"]},{"name":"data class Tile(val x: Int, val y: Int, var data: Any? = null)","description":"graphMateKT.Tile","location":"graphmatekt/graphMateKT/-tile/index.html","searchKeys":["Tile","data class Tile(val x: Int, val y: Int, var data: Any? = null)","graphMateKT.Tile"]},{"name":"fun <T : Any> BaseGraph<T>.visualizeGraph(bidirectional: Boolean = false, finalPath: List<T> = finalPath(), screenTitle: String = \"Graph visualizer (Click or space to pause and resume)\", animationTicTimeOverride: Double? = null, closeOnEnd: Boolean = false, startPaused: Boolean = false, screenWidthOverride: Double? = null)","description":"graphMateKT.graphGraphics.visualizeGraph","location":"graphmatekt/graphMateKT.graphGraphics/visualize-graph.html","searchKeys":["visualizeGraph","fun <T : Any> BaseGraph<T>.visualizeGraph(bidirectional: Boolean = false, finalPath: List<T> = finalPath(), screenTitle: String = \"Graph visualizer (Click or space to pause and resume)\", animationTicTimeOverride: Double? = null, closeOnEnd: Boolean = false, startPaused: Boolean = false, screenWidthOverride: Double? = null)","graphMateKT.graphGraphics.visualizeGraph"]},{"name":"fun AdjacencyList.deepCopy(): MutableList<MutableList<Edge>>","description":"graphMateKT.deepCopy","location":"graphmatekt/graphMateKT/deep-copy.html","searchKeys":["deepCopy","fun AdjacencyList.deepCopy(): MutableList<MutableList<Edge>>","graphMateKT.deepCopy"]},{"name":"fun AdjacencyList.toUnweightedAdjacencyList(): MutableList<MutableList<Int>>","description":"graphMateKT.toUnweightedAdjacencyList","location":"graphmatekt/graphMateKT/to-unweighted-adjacency-list.html","searchKeys":["toUnweightedAdjacencyList","fun AdjacencyList.toUnweightedAdjacencyList(): MutableList<MutableList<Int>>","graphMateKT.toUnweightedAdjacencyList"]},{"name":"fun Components.visualizeComponents()","description":"graphMateKT.graphGraphics.visualizeComponents","location":"graphmatekt/graphMateKT.graphGraphics/visualize-components.html","searchKeys":["visualizeComponents","fun Components.visualizeComponents()","graphMateKT.graphGraphics.visualizeComponents"]},{"name":"fun Grid.visualizeGrid(currentVisitedNodes: List<Tile> = currentVisitedNodes(), finalPath: List<Tile> = finalPath(), nodeDistances: List<Double> = currentVisitedNodes.map { distanceTo(it) }, screenTitle: String = \"Grid visualizer (Click or space to pause and resume)\", animationTicTimeOverride: Double? = null, closeOnEnd: Boolean = false, startPaused: Boolean = false, screenWidthOverride: Double? = null)","description":"graphMateKT.gridGraphics.visualizeGrid","location":"graphmatekt/graphMateKT.gridGraphics/visualize-grid.html","searchKeys":["visualizeGrid","fun Grid.visualizeGrid(currentVisitedNodes: List<Tile> = currentVisitedNodes(), finalPath: List<Tile> = finalPath(), nodeDistances: List<Double> = currentVisitedNodes.map { distanceTo(it) }, screenTitle: String = \"Grid visualizer (Click or space to pause and resume)\", animationTicTimeOverride: Double? = null, closeOnEnd: Boolean = false, startPaused: Boolean = false, screenWidthOverride: Double? = null)","graphMateKT.gridGraphics.visualizeGrid"]},{"name":"fun IntComponents.visualizeIntComponents()","description":"graphMateKT.graphGraphics.visualizeIntComponents","location":"graphmatekt/graphMateKT.graphGraphics/visualize-int-components.html","searchKeys":["visualizeIntComponents","fun IntComponents.visualizeIntComponents()","graphMateKT.graphGraphics.visualizeIntComponents"]},{"name":"fun UnweightedAdjacencyList.toWeightedAdjacencyList(): MutableList<MutableList<Pair<Double, Int>>>","description":"graphMateKT.toWeightedAdjacencyList","location":"graphmatekt/graphMateKT/to-weighted-adjacency-list.html","searchKeys":["toWeightedAdjacencyList","fun UnweightedAdjacencyList.toWeightedAdjacencyList(): MutableList<MutableList<Pair<Double, Int>>>","graphMateKT.toWeightedAdjacencyList"]},{"name":"fun addEdge(node1: T, node2: T, weight: Number? = null)","description":"graphMateKT.graphClasses.BaseGraph.addEdge","location":"graphmatekt/graphMateKT.graphClasses/-base-graph/add-edge.html","searchKeys":["addEdge","fun addEdge(node1: T, node2: T, weight: Number? = null)","graphMateKT.graphClasses.BaseGraph.addEdge"]},{"name":"fun amanda(): String","description":"graphMateKT.examples.amanda","location":"graphmatekt/graphMateKT.examples/amanda.html","searchKeys":["amanda","fun amanda(): String","graphMateKT.examples.amanda"]},{"name":"fun amazing(): String","description":"graphMateKT.examples.amazing","location":"graphmatekt/graphMateKT.examples/amazing.html","searchKeys":["amazing","fun amazing(): String","graphMateKT.examples.amazing"]},{"name":"fun amoebas(): String","description":"graphMateKT.examples.amoebas","location":"graphmatekt/graphMateKT.examples/amoebas.html","searchKeys":["amoebas","fun amoebas(): String","graphMateKT.examples.amoebas"]},{"name":"fun baas(): Int","description":"graphMateKT.examples.baas","location":"graphmatekt/graphMateKT.examples/baas.html","searchKeys":["baas","fun baas(): Int","graphMateKT.examples.baas"]},{"name":"fun bfs(startNode: T, target: T? = null, reset: Boolean = true)","description":"graphMateKT.graphClasses.BaseGraph.bfs","location":"graphmatekt/graphMateKT.graphClasses/-base-graph/bfs.html","searchKeys":["bfs","fun bfs(startNode: T, target: T? = null, reset: Boolean = true)","graphMateKT.graphClasses.BaseGraph.bfs"]},{"name":"fun bfs(startNodes: List<T>, target: T? = null, reset: Boolean = true)","description":"graphMateKT.graphClasses.BaseGraph.bfs","location":"graphmatekt/graphMateKT.graphClasses/-base-graph/bfs.html","searchKeys":["bfs","fun bfs(startNodes: List<T>, target: T? = null, reset: Boolean = true)","graphMateKT.graphClasses.BaseGraph.bfs"]},{"name":"fun bigtruck(): String","description":"graphMateKT.examples.bigtruck","location":"graphmatekt/graphMateKT.examples/bigtruck.html","searchKeys":["bigtruck","fun bigtruck(): String","graphMateKT.examples.bigtruck"]},{"name":"fun birthday(): String","description":"graphMateKT.examples.birthday","location":"graphmatekt/graphMateKT.examples/birthday.html","searchKeys":["birthday","fun birthday(): String","graphMateKT.examples.birthday"]},{"name":"fun blackvienna(): String","description":"graphMateKT.examples.blackvienna","location":"graphmatekt/graphMateKT.examples/blackvienna.html","searchKeys":["blackvienna","fun blackvienna(): String","graphMateKT.examples.blackvienna"]},{"name":"fun boggle(): String","description":"graphMateKT.examples.boggle","location":"graphmatekt/graphMateKT.examples/boggle.html","searchKeys":["boggle","fun boggle(): String","graphMateKT.examples.boggle"]},{"name":"fun brexit(): String","description":"graphMateKT.examples.brexit","location":"graphmatekt/graphMateKT.examples/brexit.html","searchKeys":["brexit","fun brexit(): String","graphMateKT.examples.brexit"]},{"name":"fun buggyrobot(): String","description":"graphMateKT.examples.buggyrobot","location":"graphmatekt/graphMateKT.examples/buggyrobot.html","searchKeys":["buggyrobot","fun buggyrobot(): String","graphMateKT.examples.buggyrobot"]},{"name":"fun builddeps(): String","description":"graphMateKT.examples.builddeps","location":"graphmatekt/graphMateKT.examples/builddeps.html","searchKeys":["builddeps","fun builddeps(): String","graphMateKT.examples.builddeps"]},{"name":"fun buriedtreasure2(): String","description":"graphMateKT.examples.buriedtreasure2","location":"graphmatekt/graphMateKT.examples/buriedtreasure2.html","searchKeys":["buriedtreasure2","fun buriedtreasure2(): String","graphMateKT.examples.buriedtreasure2"]},{"name":"fun buttonbashing(): String","description":"graphMateKT.examples.buttonbashing","location":"graphmatekt/graphMateKT.examples/buttonbashing.html","searchKeys":["buttonbashing","fun buttonbashing(): String","graphMateKT.examples.buttonbashing"]},{"name":"fun cantinaOfBabel(): Int","description":"graphMateKT.examples.cantinaOfBabel","location":"graphmatekt/graphMateKT.examples/cantina-of-babel.html","searchKeys":["cantinaOfBabel","fun cantinaOfBabel(): Int","graphMateKT.examples.cantinaOfBabel"]},{"name":"fun charlesincharge(): String","description":"graphMateKT.examples.charlesincharge","location":"graphmatekt/graphMateKT.examples/charlesincharge.html","searchKeys":["charlesincharge","fun charlesincharge(): String","graphMateKT.examples.charlesincharge"]},{"name":"fun connect(node1: T, node2: T, weight: Number? = null)","description":"graphMateKT.graphClasses.BaseGraph.connect","location":"graphmatekt/graphMateKT.graphClasses/-base-graph/connect.html","searchKeys":["connect","fun connect(node1: T, node2: T, weight: Number? = null)","graphMateKT.graphClasses.BaseGraph.connect"]},{"name":"fun connectGrid(bidirectional: Boolean = false, getNeighbours: (t: Tile) -> List<Tile>)","description":"graphMateKT.graphClasses.Grid.connectGrid","location":"graphmatekt/graphMateKT.graphClasses/-grid/connect-grid.html","searchKeys":["connectGrid","fun connectGrid(bidirectional: Boolean = false, getNeighbours: (t: Tile) -> List<Tile>)","graphMateKT.graphClasses.Grid.connectGrid"]},{"name":"fun connectGridDefault()","description":"graphMateKT.graphClasses.Grid.connectGridDefault","location":"graphmatekt/graphMateKT.graphClasses/-grid/connect-grid-default.html","searchKeys":["connectGridDefault","fun connectGridDefault()","graphMateKT.graphClasses.Grid.connectGridDefault"]},{"name":"fun crossCountry(): Int","description":"graphMateKT.examples.crossCountry","location":"graphmatekt/graphMateKT.examples/cross-country.html","searchKeys":["crossCountry","fun crossCountry(): Int","graphMateKT.examples.crossCountry"]},{"name":"fun currentVisitedNodes(): List<T>","description":"graphMateKT.graphClasses.BaseGraph.currentVisitedNodes","location":"graphmatekt/graphMateKT.graphClasses/-base-graph/current-visited-nodes.html","searchKeys":["currentVisitedNodes","fun currentVisitedNodes(): List<T>","graphMateKT.graphClasses.BaseGraph.currentVisitedNodes"]},{"name":"fun dataIsDigit(): Boolean","description":"graphMateKT.Tile.dataIsDigit","location":"graphmatekt/graphMateKT/-tile/data-is-digit.html","searchKeys":["dataIsDigit","fun dataIsDigit(): Boolean","graphMateKT.Tile.dataIsDigit"]},{"name":"fun day10a(input: List<String>): Long","description":"graphMateKT.examples.day10a","location":"graphmatekt/graphMateKT.examples/day10a.html","searchKeys":["day10a","fun day10a(input: List<String>): Long","graphMateKT.examples.day10a"]},{"name":"fun day18a(input: List<String>, gridSize: Int, lineCount: Int): Int","description":"graphMateKT.examples.day18a","location":"graphmatekt/graphMateKT.examples/day18a.html","searchKeys":["day18a","fun day18a(input: List<String>, gridSize: Int, lineCount: Int): Int","graphMateKT.examples.day18a"]},{"name":"fun day20a(input: List<String>, cheatGoal: Int, fairTime: Int): Int","description":"graphMateKT.examples.day20a","location":"graphmatekt/graphMateKT.examples/day20a.html","searchKeys":["day20a","fun day20a(input: List<String>, cheatGoal: Int, fairTime: Int): Int","graphMateKT.examples.day20a"]},{"name":"fun day3GearRatios2023(): Int","description":"graphMateKT.examples.day3GearRatios2023","location":"graphmatekt/graphMateKT.examples/day3-gear-ratios2023.html","searchKeys":["day3GearRatios2023","fun day3GearRatios2023(): Int","graphMateKT.examples.day3GearRatios2023"]},{"name":"fun deleteNodeAtXY(x: Int, y: Int)","description":"graphMateKT.graphClasses.Grid.deleteNodeAtXY","location":"graphmatekt/graphMateKT.graphClasses/-grid/delete-node-at-x-y.html","searchKeys":["deleteNodeAtXY","fun deleteNodeAtXY(x: Int, y: Int)","graphMateKT.graphClasses.Grid.deleteNodeAtXY"]},{"name":"fun deleteNodesWithData(data: Any?)","description":"graphMateKT.graphClasses.Grid.deleteNodesWithData","location":"graphmatekt/graphMateKT.graphClasses/-grid/delete-nodes-with-data.html","searchKeys":["deleteNodesWithData","fun deleteNodesWithData(data: Any?)","graphMateKT.graphClasses.Grid.deleteNodesWithData"]},{"name":"fun depth(): Int","description":"graphMateKT.graphClasses.BaseGraph.depth","location":"graphmatekt/graphMateKT.graphClasses/-base-graph/depth.html","searchKeys":["depth","fun depth(): Int","graphMateKT.graphClasses.BaseGraph.depth"]},{"name":"fun dfs(startNode: T, reset: Boolean = true)","description":"graphMateKT.graphClasses.BaseGraph.dfs","location":"graphmatekt/graphMateKT.graphClasses/-base-graph/dfs.html","searchKeys":["dfs","fun dfs(startNode: T, reset: Boolean = true)","graphMateKT.graphClasses.BaseGraph.dfs"]},{"name":"fun dijkstra(startNode: T, target: T? = null)","description":"graphMateKT.graphClasses.BaseGraph.dijkstra","location":"graphmatekt/graphMateKT.graphClasses/-base-graph/dijkstra.html","searchKeys":["dijkstra","fun dijkstra(startNode: T, target: T? = null)","graphMateKT.graphClasses.BaseGraph.dijkstra"]},{"name":"fun dijkstraCF(): List<Int>","description":"graphMateKT.examples.dijkstraCF","location":"graphmatekt/graphMateKT.examples/dijkstra-c-f.html","searchKeys":["dijkstraCF","fun dijkstraCF(): List<Int>","graphMateKT.examples.dijkstraCF"]},{"name":"fun distanceFromUtoV(u: T, v: T): Double","description":"graphMateKT.graphClasses.BaseGraph.distanceFromUtoV","location":"graphmatekt/graphMateKT.graphClasses/-base-graph/distance-from-uto-v.html","searchKeys":["distanceFromUtoV","fun distanceFromUtoV(u: T, v: T): Double","graphMateKT.graphClasses.BaseGraph.distanceFromUtoV"]},{"name":"fun distanceTo(node: T): Double","description":"graphMateKT.graphClasses.BaseGraph.distanceTo","location":"graphmatekt/graphMateKT.graphClasses/-base-graph/distance-to.html","searchKeys":["distanceTo","fun distanceTo(node: T): Double","graphMateKT.graphClasses.BaseGraph.distanceTo"]},{"name":"fun edges(t: T): List<Pair<Double, T>>","description":"graphMateKT.graphClasses.BaseGraph.edges","location":"graphmatekt/graphMateKT.graphClasses/-base-graph/edges.html","searchKeys":["edges","fun edges(t: T): List<Pair<Double, T>>","graphMateKT.graphClasses.BaseGraph.edges"]},{"name":"fun familydag(): String","description":"graphMateKT.examples.familydag","location":"graphmatekt/graphMateKT.examples/familydag.html","searchKeys":["familydag","fun familydag(): String","graphMateKT.examples.familydag"]},{"name":"fun faultyrobot(): String","description":"graphMateKT.examples.faultyrobot","location":"graphmatekt/graphMateKT.examples/faultyrobot.html","searchKeys":["faultyrobot","fun faultyrobot(): String","graphMateKT.examples.faultyrobot"]},{"name":"fun finalPath(): List<T>","description":"graphMateKT.graphClasses.BaseGraph.finalPath","location":"graphmatekt/graphMateKT.graphClasses/-base-graph/final-path.html","searchKeys":["finalPath","fun finalPath(): List<T>","graphMateKT.graphClasses.BaseGraph.finalPath"]},{"name":"fun floydWarshall()","description":"graphMateKT.graphClasses.BaseGraph.floydWarshall","location":"graphmatekt/graphMateKT.graphClasses/-base-graph/floyd-warshall.html","searchKeys":["floydWarshall","fun floydWarshall()","graphMateKT.graphClasses.BaseGraph.floydWarshall"]},{"name":"fun foundTarget(): Boolean","description":"graphMateKT.graphClasses.BaseGraph.foundTarget","location":"graphmatekt/graphMateKT.graphClasses/-base-graph/found-target.html","searchKeys":["foundTarget","fun foundTarget(): Boolean","graphMateKT.graphClasses.BaseGraph.foundTarget"]},{"name":"fun furthestNode(): T","description":"graphMateKT.graphClasses.BaseGraph.furthestNode","location":"graphmatekt/graphMateKT.graphClasses/-base-graph/furthest-node.html","searchKeys":["furthestNode","fun furthestNode(): T","graphMateKT.graphClasses.BaseGraph.furthestNode"]},{"name":"fun getAllNeighbours(t: Tile): List<Tile>","description":"graphMateKT.graphClasses.Grid.getAllNeighbours","location":"graphmatekt/graphMateKT.graphClasses/-grid/get-all-neighbours.html","searchKeys":["getAllNeighbours","fun getAllNeighbours(t: Tile): List<Tile>","graphMateKT.graphClasses.Grid.getAllNeighbours"]},{"name":"fun getDiagonalNeighbours(t: Tile): List<Tile>","description":"graphMateKT.graphClasses.Grid.getDiagonalNeighbours","location":"graphmatekt/graphMateKT.graphClasses/-grid/get-diagonal-neighbours.html","searchKeys":["getDiagonalNeighbours","fun getDiagonalNeighbours(t: Tile): List<Tile>","graphMateKT.graphClasses.Grid.getDiagonalNeighbours"]},{"name":"fun getPath(target: T): List<T>","description":"graphMateKT.graphClasses.BaseGraph.getPath","location":"graphmatekt/graphMateKT.graphClasses/-base-graph/get-path.html","searchKeys":["getPath","fun getPath(target: T): List<T>","graphMateKT.graphClasses.BaseGraph.getPath"]},{"name":"fun getStraightNeighbours(t: Tile): List<Tile>","description":"graphMateKT.graphClasses.Grid.getStraightNeighbours","location":"graphmatekt/graphMateKT.graphClasses/-grid/get-straight-neighbours.html","searchKeys":["getStraightNeighbours","fun getStraightNeighbours(t: Tile): List<Tile>","graphMateKT.graphClasses.Grid.getStraightNeighbours"]},{"name":"fun grid(): Int","description":"graphMateKT.examples.grid","location":"graphmatekt/graphMateKT.examples/grid.html","searchKeys":["grid","fun grid(): Int","graphMateKT.examples.grid"]},{"name":"fun honeyheist(): String","description":"graphMateKT.examples.honeyheist","location":"graphmatekt/graphMateKT.examples/honeyheist.html","searchKeys":["honeyheist","fun honeyheist(): String","graphMateKT.examples.honeyheist"]},{"name":"fun horrorList(): Int","description":"graphMateKT.examples.horrorList","location":"graphmatekt/graphMateKT.examples/horror-list.html","searchKeys":["horrorList","fun horrorList(): Int","graphMateKT.examples.horrorList"]},{"name":"fun illumination(): String","description":"graphMateKT.examples.illumination","location":"graphmatekt/graphMateKT.examples/illumination.html","searchKeys":["illumination","fun illumination(): String","graphMateKT.examples.illumination"]},{"name":"fun importspaghetti(): String","description":"graphMateKT.examples.importspaghetti","location":"graphmatekt/graphMateKT.examples/importspaghetti.html","searchKeys":["importspaghetti","fun importspaghetti(): String","graphMateKT.examples.importspaghetti"]},{"name":"fun islandBuses(): String","description":"graphMateKT.examples.islandBuses","location":"graphmatekt/graphMateKT.examples/island-buses.html","searchKeys":["islandBuses","fun islandBuses(): String","graphMateKT.examples.islandBuses"]},{"name":"fun kingEscape3(): String","description":"graphMateKT.examples.kingEscape3","location":"graphmatekt/graphMateKT.examples/king-escape3.html","searchKeys":["kingEscape3","fun kingEscape3(): String","graphMateKT.examples.kingEscape3"]},{"name":"fun main()","description":"graphMateKT.examples.main","location":"graphmatekt/graphMateKT.examples/main.html","searchKeys":["main","fun main()","graphMateKT.examples.main"]},{"name":"fun maxDistance(): Double","description":"graphMateKT.graphClasses.BaseGraph.maxDistance","location":"graphmatekt/graphMateKT.graphClasses/-base-graph/max-distance.html","searchKeys":["maxDistance","fun maxDistance(): Double","graphMateKT.graphClasses.BaseGraph.maxDistance"]},{"name":"fun minimumSpanningTree(): Pair<Double, Graph>","description":"graphMateKT.graphClasses.BaseGraph.minimumSpanningTree","location":"graphmatekt/graphMateKT.graphClasses/-base-graph/minimum-spanning-tree.html","searchKeys":["minimumSpanningTree","fun minimumSpanningTree(): Pair<Double, Graph>","graphMateKT.graphClasses.BaseGraph.minimumSpanningTree"]},{"name":"fun neighbours(t: T): List<T>","description":"graphMateKT.graphClasses.BaseGraph.neighbours","location":"graphmatekt/graphMateKT.graphClasses/-base-graph/neighbours.html","searchKeys":["neighbours","fun neighbours(t: T): List<T>","graphMateKT.graphClasses.BaseGraph.neighbours"]},{"name":"fun numbersConnectedToSymbol(input: List<String>): Int","description":"graphMateKT.examples.numbersConnectedToSymbol","location":"graphmatekt/graphMateKT.examples/numbers-connected-to-symbol.html","searchKeys":["numbersConnectedToSymbol","fun numbersConnectedToSymbol(input: List<String>): Int","graphMateKT.examples.numbersConnectedToSymbol"]},{"name":"fun print()","description":"graphMateKT.graphClasses.Grid.print","location":"graphmatekt/graphMateKT.graphClasses/-grid/print.html","searchKeys":["print","fun print()","graphMateKT.graphClasses.Grid.print"]},{"name":"fun print(isWeighted: Boolean)","description":"graphMateKT.graphClasses.BaseGraph.print","location":"graphmatekt/graphMateKT.graphClasses/-base-graph/print.html","searchKeys":["print","fun print(isWeighted: Boolean)","graphMateKT.graphClasses.BaseGraph.print"]},{"name":"fun removeEdge(node1: T, node2: T)","description":"graphMateKT.graphClasses.BaseGraph.removeEdge","location":"graphmatekt/graphMateKT.graphClasses/-base-graph/remove-edge.html","searchKeys":["removeEdge","fun removeEdge(node1: T, node2: T)","graphMateKT.graphClasses.BaseGraph.removeEdge"]},{"name":"fun repostsBFS(): Int","description":"graphMateKT.examples.repostsBFS","location":"graphmatekt/graphMateKT.examples/reposts-b-f-s.html","searchKeys":["repostsBFS","fun repostsBFS(): Int","graphMateKT.examples.repostsBFS"]},{"name":"fun repostsDFS(): Int","description":"graphMateKT.examples.repostsDFS","location":"graphmatekt/graphMateKT.examples/reposts-d-f-s.html","searchKeys":["repostsDFS","fun repostsDFS(): Int","graphMateKT.examples.repostsDFS"]},{"name":"fun resetSearchResults()","description":"graphMateKT.graphClasses.BaseGraph.resetSearchResults","location":"graphmatekt/graphMateKT.graphClasses/-base-graph/reset-search-results.html","searchKeys":["resetSearchResults","fun resetSearchResults()","graphMateKT.graphClasses.BaseGraph.resetSearchResults"]},{"name":"fun rumor(): Long","description":"graphMateKT.examples.rumor","location":"graphmatekt/graphMateKT.examples/rumor.html","searchKeys":["rumor","fun rumor(): Long","graphMateKT.examples.rumor"]},{"name":"fun size(): Int","description":"graphMateKT.graphClasses.BaseGraph.size","location":"graphmatekt/graphMateKT.graphClasses/-base-graph/size.html","searchKeys":["size","fun size(): Int","graphMateKT.graphClasses.BaseGraph.size"]},{"name":"fun slowleak(): String","description":"graphMateKT.examples.slowleak","location":"graphmatekt/graphMateKT.examples/slowleak.html","searchKeys":["slowleak","fun slowleak(): String","graphMateKT.examples.slowleak"]},{"name":"fun speedyescape(): Double","description":"graphMateKT.examples.speedyescape","location":"graphmatekt/graphMateKT.examples/speedyescape.html","searchKeys":["speedyescape","fun speedyescape(): Double","graphMateKT.examples.speedyescape"]},{"name":"fun torn2pieces(): String","description":"graphMateKT.examples.torn2pieces","location":"graphmatekt/graphMateKT.examples/torn2pieces.html","searchKeys":["torn2pieces","fun torn2pieces(): String","graphMateKT.examples.torn2pieces"]},{"name":"fun treehouses(): Double","description":"graphMateKT.examples.treehouses","location":"graphmatekt/graphMateKT.examples/treehouses.html","searchKeys":["treehouses","fun treehouses(): Double","graphMateKT.examples.treehouses"]},{"name":"fun twoknights(): String","description":"graphMateKT.examples.twoknights","location":"graphmatekt/graphMateKT.examples/twoknights.html","searchKeys":["twoknights","fun twoknights(): String","graphMateKT.examples.twoknights"]},{"name":"fun units(): String","description":"graphMateKT.examples.units","location":"graphmatekt/graphMateKT.examples/units.html","searchKeys":["units","fun units(): String","graphMateKT.examples.units"]},{"name":"fun visitedNodes(): List<T>","description":"graphMateKT.graphClasses.BaseGraph.visitedNodes","location":"graphmatekt/graphMateKT.graphClasses/-base-graph/visited-nodes.html","searchKeys":["visitedNodes","fun visitedNodes(): List<T>","graphMateKT.graphClasses.BaseGraph.visitedNodes"]},{"name":"fun walkforest(): String","description":"graphMateKT.examples.walkforest","location":"graphmatekt/graphMateKT.examples/walkforest.html","searchKeys":["walkforest","fun walkforest(): String","graphMateKT.examples.walkforest"]},{"name":"fun watersheds(): String","description":"graphMateKT.examples.watersheds","location":"graphmatekt/graphMateKT.examples/watersheds.html","searchKeys":["watersheds","fun watersheds(): String","graphMateKT.examples.watersheds"]},{"name":"fun wedding(): String","description":"graphMateKT.examples.wedding","location":"graphmatekt/graphMateKT.examples/wedding.html","searchKeys":["wedding","fun wedding(): String","graphMateKT.examples.wedding"]},{"name":"fun xPlusYTimesWidth(width: Int): Int","description":"graphMateKT.Tile.xPlusYTimesWidth","location":"graphmatekt/graphMateKT/-tile/x-plus-y-times-width.html","searchKeys":["xPlusYTimesWidth","fun xPlusYTimesWidth(width: Int): Int","graphMateKT.Tile.xPlusYTimesWidth"]},{"name":"fun xy2Node(x: Int, y: Int): Tile?","description":"graphMateKT.graphClasses.Grid.xy2Node","location":"graphmatekt/graphMateKT.graphClasses/-grid/xy2-node.html","searchKeys":["xy2Node","fun xy2Node(x: Int, y: Int): Tile?","graphMateKT.graphClasses.Grid.xy2Node"]},{"name":"open fun stronglyConnectedComponents(): List<List<T>>","description":"graphMateKT.graphClasses.BaseGraph.stronglyConnectedComponents","location":"graphmatekt/graphMateKT.graphClasses/-base-graph/strongly-connected-components.html","searchKeys":["stronglyConnectedComponents","open fun stronglyConnectedComponents(): List<List<T>>","graphMateKT.graphClasses.BaseGraph.stronglyConnectedComponents"]},{"name":"open fun topologicalSort(): List<T>","description":"graphMateKT.graphClasses.BaseGraph.topologicalSort","location":"graphmatekt/graphMateKT.graphClasses/-base-graph/topological-sort.html","searchKeys":["topologicalSort","open fun topologicalSort(): List<T>","graphMateKT.graphClasses.BaseGraph.topologicalSort"]},{"name":"open override fun addNode(node: Any)","description":"graphMateKT.graphClasses.Graph.addNode","location":"graphmatekt/graphMateKT.graphClasses/-graph/add-node.html","searchKeys":["addNode","open override fun addNode(node: Any)","graphMateKT.graphClasses.Graph.addNode"]},{"name":"open override fun addNode(node: Int): Nothing","description":"graphMateKT.graphClasses.IntGraph.addNode","location":"graphmatekt/graphMateKT.graphClasses/-int-graph/add-node.html","searchKeys":["addNode","open override fun addNode(node: Int): Nothing","graphMateKT.graphClasses.IntGraph.addNode"]},{"name":"open override fun addNode(node: Tile)","description":"graphMateKT.graphClasses.Grid.addNode","location":"graphmatekt/graphMateKT.graphClasses/-grid/add-node.html","searchKeys":["addNode","open override fun addNode(node: Tile)","graphMateKT.graphClasses.Grid.addNode"]},{"name":"open override fun nodes(): List<Any>","description":"graphMateKT.graphClasses.Graph.nodes","location":"graphmatekt/graphMateKT.graphClasses/-graph/nodes.html","searchKeys":["nodes","open override fun nodes(): List<Any>","graphMateKT.graphClasses.Graph.nodes"]},{"name":"open override fun nodes(): List<Int>","description":"graphMateKT.graphClasses.IntGraph.nodes","location":"graphmatekt/graphMateKT.graphClasses/-int-graph/nodes.html","searchKeys":["nodes","open override fun nodes(): List<Int>","graphMateKT.graphClasses.IntGraph.nodes"]},{"name":"open override fun nodes(): List<Tile>","description":"graphMateKT.graphClasses.Grid.nodes","location":"graphmatekt/graphMateKT.graphClasses/-grid/nodes.html","searchKeys":["nodes","open override fun nodes(): List<Tile>","graphMateKT.graphClasses.Grid.nodes"]},{"name":"open override fun stronglyConnectedComponents(): List<List<Tile>>","description":"graphMateKT.graphClasses.Grid.stronglyConnectedComponents","location":"graphmatekt/graphMateKT.graphClasses/-grid/strongly-connected-components.html","searchKeys":["stronglyConnectedComponents","open override fun stronglyConnectedComponents(): List<List<Tile>>","graphMateKT.graphClasses.Grid.stronglyConnectedComponents"]},{"name":"open override fun toString(): String","description":"graphMateKT.graphClasses.Graph.toString","location":"graphmatekt/graphMateKT.graphClasses/-graph/to-string.html","searchKeys":["toString","open override fun toString(): String","graphMateKT.graphClasses.Graph.toString"]},{"name":"open override fun topologicalSort(): List<Tile>","description":"graphMateKT.graphClasses.Grid.topologicalSort","location":"graphmatekt/graphMateKT.graphClasses/-grid/topological-sort.html","searchKeys":["topologicalSort","open override fun topologicalSort(): List<Tile>","graphMateKT.graphClasses.Grid.topologicalSort"]},{"name":"typealias AdjacencyList = MutableList<Edges>","description":"graphMateKT.AdjacencyList","location":"graphmatekt/graphMateKT/-adjacency-list/index.html","searchKeys":["AdjacencyList","typealias AdjacencyList = MutableList<Edges>","graphMateKT.AdjacencyList"]},{"name":"typealias Components = List<List<Any>>","description":"graphMateKT.Components","location":"graphmatekt/graphMateKT/-components/index.html","searchKeys":["Components","typealias Components = List<List<Any>>","graphMateKT.Components"]},{"name":"typealias Edge = Pair<Double, Int>","description":"graphMateKT.Edge","location":"graphmatekt/graphMateKT/-edge/index.html","searchKeys":["Edge","typealias Edge = Pair<Double, Int>","graphMateKT.Edge"]},{"name":"typealias Edges = MutableList<Edge>","description":"graphMateKT.Edges","location":"graphmatekt/graphMateKT/-edges/index.html","searchKeys":["Edges","typealias Edges = MutableList<Edge>","graphMateKT.Edges"]},{"name":"typealias IntComponents = List<List<Int>>","description":"graphMateKT.IntComponents","location":"graphmatekt/graphMateKT/-int-components/index.html","searchKeys":["IntComponents","typealias IntComponents = List<List<Int>>","graphMateKT.IntComponents"]},{"name":"typealias UnweightedAdjacencyList = MutableList<MutableList<Int>>","description":"graphMateKT.UnweightedAdjacencyList","location":"graphmatekt/graphMateKT/-unweighted-adjacency-list/index.html","searchKeys":["UnweightedAdjacencyList","typealias UnweightedAdjacencyList = MutableList<MutableList<Int>>","graphMateKT.UnweightedAdjacencyList"]},{"name":"val height: Int","description":"graphMateKT.graphClasses.Grid.height","location":"graphmatekt/graphMateKT.graphClasses/-grid/height.html","searchKeys":["height","val height: Int","graphMateKT.graphClasses.Grid.height"]},{"name":"val width: Int","description":"graphMateKT.graphClasses.Grid.width","location":"graphmatekt/graphMateKT.graphClasses/-grid/width.html","searchKeys":["width","val width: Int","graphMateKT.graphClasses.Grid.width"]},{"name":"val x: Int","description":"graphMateKT.Tile.x","location":"graphmatekt/graphMateKT/-tile/x.html","searchKeys":["x","val x: Int","graphMateKT.Tile.x"]},{"name":"val y: Int","description":"graphMateKT.Tile.y","location":"graphmatekt/graphMateKT/-tile/y.html","searchKeys":["y","val y: Int","graphMateKT.Tile.y"]},{"name":"var data: Any?","description":"graphMateKT.Tile.data","location":"graphmatekt/graphMateKT/-tile/data.html","searchKeys":["data","var data: Any?","graphMateKT.Tile.data"]}]